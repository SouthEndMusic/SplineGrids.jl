var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page shows examples of spline grids of various dimensionalities via their plotting recipes.","category":"page"},{"location":"examples/#1-input,-1-output","page":"Examples","title":"1 input, 1 output","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SplineGrids\nusing Plots\n\n# Spline grid parameters\nn_control_points = 10\ndegree = 3\nn_sample_points = 250\ndim_out = 1\n\n# Define spline grid\nspline_dimension = SplineDimension(n_control_points, degree, n_sample_points, extent=(3.0, 5.0))\nspline_grid = SplineGrid(spline_dimension, dim_out)\n\n# Set control points\nspline_grid.control_points .= [0.342, 0.633, 0.446, 0.716, 0.843, 0.171, 0.061, 0.973, 0.057, 0.671]\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#1-input,-2-outputs","page":"Examples","title":"1 input, 2 outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = 10\ndegree = 2\nn_sample_points = 250\ndim_out = 2\n\n# Define spline grid\nspline_dimension = SplineDimension(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimension, dim_out)\n\n# Set control points\nr = 1:n_control_points\nθ = 1:n_control_points\nspline_grid.control_points[:, 1] .= @. r * cos(θ)\nspline_grid.control_points[:, 2] .= @. r * sin(θ)\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#1-input,-3-outputs","page":"Examples","title":"1 input, 3 outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = 10\ndegree = 2\nn_sample_points = 250\ndim_out = 3\n\n# Define spline grid\nspline_dimension = SplineDimension(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimension, dim_out)\n\n# Set control points\nr = 1:n_control_points\nθ = 1:n_control_points\nz = 1:n_control_points\nspline_grid.control_points[:, 1] .= @. r * cos(θ)\nspline_grid.control_points[:, 2] .= @. r * sin(θ)\nspline_grid.control_points[:, 3] .= z\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#1-input,-4-outputs","page":"Examples","title":"1 input, 4 outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = 10\ndegree = 2\nn_sample_points = 250\ndim_out = 4\n\n# Define spline grid\nspline_dimension = SplineDimension(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimension, dim_out)\n\n# Set control points\nr = 1:n_control_points\nθ = 1:n_control_points\nz = 1:n_control_points\nc = sin.(z)\nspline_grid.control_points[:, 1] .= @. r * cos(θ)\nspline_grid.control_points[:, 2] .= @. r * sin(θ)\nspline_grid.control_points[:, 3] .= z\nspline_grid.control_points[:, 4] .= c\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#2-inputs,-1-output","page":"Examples","title":"2 inputs, 1 output","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = (5, 6)\ndegree = (2, 2)\nn_sample_points = (60, 50)\ndim_out = 1\n\n# Define spline grid\nspline_dimensions = SplineDimension.(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimensions, dim_out)\n\n# Set control points\nspline_grid.control_points .= 0\nspline_grid.control_points[1:2:end] .= 1:prod(n_control_points)/2\n\n# Evaluate spline grid \nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#2-inputs,-2-outputs","page":"Examples","title":"2 inputs, 2 outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = (4, 4)\ndegree = (2, 3)\nn_sample_points = (15, 20)\ndim_out = 2\n\n# Define spline grid\nspline_dimensions = SplineDimension.(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimensions, dim_out)\n\n# Set control points\nspline_grid.control_points .= [-0.358 0.795 -0.016 -0.295; 0.923 -0.182 -0.644 0.612; -0.91 0.708 -0.426 0.412; 0.56 -0.78 0.515 0.676;;; 0.938 0.393 -0.702 -0.99; -0.578 0.305 -0.842 -0.57; 0.034 -0.813 -0.514 0.162; -0.016 -0.822 -0.261 -0.148]\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"examples/#2-inputs,-3-outputs","page":"Examples","title":"2 inputs, 3 outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Spline grid parameters\nn_control_points = (25, 2)\ndegree = (3, 1)\nn_sample_points = (100, 100)\ndim_out = 3\n\n# Define spline grid\nspline_dimension = SplineDimension.(n_control_points, degree, n_sample_points)\nspline_grid = SplineGrid(spline_dimension, dim_out)\n\n# Set control points\nspline_grid.control_points .= 0\nR = 3\nr = 1\nρ = range(-r, r, length=n_control_points[2])\nfor (i, θ) in enumerate(range(0, 2π, length=n_control_points[1]))\n    ϕ = 2θ\n    spline_grid.control_points[i, :, 1] .= @. (R + ρ * cos(ϕ)) * cos(θ)\n    spline_grid.control_points[i, :, 2] .= @. (R + ρ * cos(ϕ)) * sin(θ)\n    spline_grid.control_points[i, :, 3] .= ρ * sin(ϕ)\nend\n\n# Evaluate spline grid\nevaluate!(spline_grid)\n\n# Plot\nplot(spline_grid)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spline_grid","category":"page"},{"location":"manual/#Constructors","page":"Manual","title":"Constructors","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"KnotVector(::Integer, ::Integer)\nSplineDimension(::Integer, ::Integer, ::Integer)\nSplineGrid(::NTuple{N_in, <:SplineDimension}, ::Integer) where N_in","category":"page"},{"location":"manual/#SplineGrids.KnotVector-Tuple{Integer, Integer}","page":"Manual","title":"SplineGrids.KnotVector","text":"KnotVector(n_basis_functions::Integer, degree::Integer; extent::Tuple{Number, Number} = (0,1), distribution::Symbol = :equispaced)\n\nConstruct a clamped knot vector, i.e. the multiplicity of the first and last knot is degree + 1 and the other multiplicities are 1.\n\nArguments\n\nn_basis_functions: The number of basis functions that will be defined on this knot vector\ndegree: The degree of the basis functions that will be defined on this knot vector\n\nKeyword Arguments\n\nextent: A tuple (tmin, tmax) defining the extend of the knot vector\ndistribution: The distribution of the internal knots. The options are :equispaced or :random\n\n\n\n\n\n","category":"method"},{"location":"manual/#SplineGrids.SplineDimension-Tuple{Integer, Integer, Integer}","page":"Manual","title":"SplineGrids.SplineDimension","text":"SplineDimension(n_basis_functions::Integer, degree::Integer, n_sample_points::Integer; kwargs...)::SplineDimension\n\nConstructor for a SplineDimension. For now the sample points are equispaced on the extent of the knot vector. Key word arguments are passed to the KnotVector constructor.\n\n\n\n\n\n","category":"method"},{"location":"manual/#SplineGrids.SplineGrid-Union{Tuple{N_in}, Tuple{NTuple{N_in, var\"#s5\"} where var\"#s5\"<:SplineDimension, Integer}} where N_in","page":"Manual","title":"SplineGrids.SplineGrid","text":"SplineGrid(spline_dimensions::NTuple{N_in, <:SplineDimension}, dim_out::Integer)\n\nDefine a SplineGrid from an NTuple of spline dimensions and the number of output dimensions.\n\nInputs\n\nspline_dimensions: an NTuple of spline dimensions\ndim_out: The number of output dimensions. I.e. the control points and thus the spline live in ℝ^dim_out.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Evaluation","page":"Manual","title":"Evaluation","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"evaluate!(::SplineDimension)\nevaluate!(::SplineGrids.AbstractSplineGrid{Nin, Nout}) where {Nin, Nout}","category":"page"},{"location":"manual/#SplineGrids.evaluate!-Tuple{SplineDimension}","page":"Manual","title":"SplineGrids.evaluate!","text":"evaluate!(spline_dimension)\n\nPer sample point, get the value of the spline_dimension.degree + 1 basis functions that have a non-zero value for that sample point. This is based on the Cox-de Boor recursion formula.\n\nThe l-th sample point t has sample index i, meaning that t ∈ [tᵢ, tᵢ₊₁). Therefore Bᵢ₀(t) = 1, Bⱼ₀(t) = 0 for j ≠ i. For degree k, t is in the domain of Bⱼₖ which is [tⱼ, tⱼ₊ₖ₊₁), for j = i - k, ..., i.\n\nArguments\n\nspline_dimension\n\n\n\n\n\n","category":"method"},{"location":"manual/#SplineGrids.evaluate!-Union{Tuple{SplineGrids.AbstractSplineGrid{Nin, Nout}}, Tuple{Nout}, Tuple{Nin}} where {Nin, Nout}","page":"Manual","title":"SplineGrids.evaluate!","text":"evaluate!(spline_grid::SplineGrid)\n\nEvaluate the spline grid, that is: take the evaluated basis functions for each sample point for each SplineDimension, and compute the output grid on each sample point combination as a linear combination of control with basis function products as coefficients.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Structs","page":"Manual","title":"Structs","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"KnotVector\nSplineDimension\nSplineGrid","category":"page"},{"location":"manual/#SplineGrids.KnotVector","page":"Manual","title":"SplineGrids.KnotVector","text":"KnotVector(knots, multiplicities)\n\nDefines a knot vector.\n\nArguments\n\nknot_values: The values in the knot vector. Must be strictly increasing.\nmultiplicities: The multiplicity of each knot in knots.\n\n\n\n\n\n","category":"type"},{"location":"manual/#SplineGrids.SplineDimension","page":"Manual","title":"SplineGrids.SplineDimension","text":"SplineDimension(degree, knot_vector, sample_points, sample_indices)\n\nDefines the set of basis functions for a single dimension, and how it is sampled.\n\nArguments\n\ndegree: The degree of the piecewise polynomial basis functions.\nknot_vector: The knot vector on which the basis functions are defined.\nsample_points: The points in the domain of the basis functions where they are sampled. Must\nlie within the boundaries of the knot vector.\nsample_indices: The indices i of the sample points t in the knot vector such that knot_vector.knots[i] ≤ t < knot_vector.knots[i + 1]`\neval: A matrix of shape (length(sample_points), degree + 1), with per sample point the values of those basis functions whose support the sample point is in.\n\n\n\n\n\n","category":"type"},{"location":"manual/#SplineGrids.SplineGrid","page":"Manual","title":"SplineGrids.SplineGrid","text":"The SplineGrid is the central object of the SplineGrids.jl package, containing all information to evaluate the defined spline on the defined grid.\n\nFields\n\nspline_dimensions: A SplineDimension per dimension of the spline, containing data to evaluate basis functions.\ncontrol points: The points that define the shape of the spline, and in how many dimensions it is embedded.\nweights: For now unsupported, will eventually be used to define NURBS.\neval: The array where the evaluated spline is stored.\nbasis_function_products: An array of intermediate results for evaluating the spline grids, containing products of basis functions from the various spline dimensions.\n\n\n\n\n\n","category":"type"},{"location":"manual/#Utility-functions","page":"Manual","title":"Utility functions","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"decompress","category":"page"},{"location":"manual/#SplineGrids.decompress","page":"Manual","title":"SplineGrids.decompress","text":"Transform spline_dimension.eval into a matrix of shape (n_sample_points, n_points - degree - 1) which explicitly gives the value for each basis function at each sample point.\n\n\n\n\n\n","category":"function"},{"location":"#SplineGrids.jl","page":"SplineGrids.jl","title":"SplineGrids.jl","text":"","category":"section"}]
}
